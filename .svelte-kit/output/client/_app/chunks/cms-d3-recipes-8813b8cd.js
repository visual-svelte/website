import{aY as Wt,aq as zt,S as Ye,i as Ue,s as qe,_ as Yt,$ as Ut,a as h,d as o,b as p,aB as Nt,g as W,H as z,I as Ot,b6 as De,v as qt,aK as Xt,e as i,c as n,a7 as Ht,F as t,t as c,k as b,w as Ce,h as f,m as y,x as He,y as Le,q as je,o as Me,B as Re,G as Lt,Y as Zt,aa as Kt,am as jt,aC as Jt,aM as vt,aD as gt,aE as wt,aF as Qt}from"./vendor-d206b978.js";import{C as ea}from"./CodeVisual-d80e1839.js";import{I as ta,S as aa}from"./ScrollyWrapper-bc75649c.js";const ra=["In the starting position, we have a simple bar  with six categoric variables along the x-axis. But what if the user wanted to explore how the categories looked as a pie chart (said no-one ever)? ","At this point, I should make it clear that this was a technical challenge to see what was possible in terms of SVG path manipulation, not what might be best practice in terms of data visualization. Also the axes have been removed to make the code and animations easier to follow. ","The theory goes that by morphing between the different chart types, the user can follow a category and as such make better inferences. Any way.... keep scrolling to see the first animation... ","From the user perspective, each bar magically morphs into an arc in the pie chart. Under the hood, in fact, everything is an SVG path (not SVG rect for the bars).","In the original video, they showed that by staggering the animations with a slight delay between the categories, the user could follow with categories went where better, so I implemented that too.","I used the flubber npm package to perform the interpolation. I tried and tested a number of different interpolation methods (see the implementation tips below). ","Guess what, they may look like circles, but they are actually SVG paths too. ","And finally, we morph back to the starting position. "];let bt=[2,13,5,10,3,14];function sa(g){let e=50,r=20,a=200,s=0,l=[];return g.map((m,_)=>{let w=(s+e+r)*_,S=m*15,u=`M${w},${a},  ${w+e},${a},  ${w+e},${a-S}, ${w},${a-S}Z`;l.push(u)}),l}const Ge=sa(bt),oa=Wt()(bt),ia=zt(),Je=oa.map(g=>{let e={innerRadius:50,outerRadius:100,startAngle:g.startAngle,endAngle:g.endAngle};return ia(e)});function na(g){const e=(a,s,l,m)=>`M${s-a},${m}a${a},${l} 0 1,0 ${a*2},0a${a},${l} 0 1,0 -${a*2},0 Z`;let r=[];return g.map((a,s)=>{let l=s*70+25,m=200-a*15,_=10;r.push(e(_,l,_,m))}),r}const Qe=na(bt);function Mt(g,e,r){const a=g.slice();return a[12]=e[r],a[14]=r,a}function Rt(g){let e,r,a;return{c(){e=Yt("path"),this.h()},l(s){e=Ut(s,"path",{fill:!0,"stroke-width":!0,"stroke-linecap":!0,d:!0}),h(e).forEach(o),this.h()},h(){p(e,"fill",r=Nt[g[14]]),p(e,"stroke-width","3"),p(e,"stroke-linecap","round"),p(e,"d",a=g[12])},m(s,l){W(s,e,l)},p:z,d(s){s&&o(e)}}}function la(g){let e,r=Ge,a=[];for(let s=0;s<r.length;s+=1)a[s]=Rt(Mt(g,r,s));return{c(){e=Yt("svg");for(let s=0;s<a.length;s+=1)a[s].c();this.h()},l(s){e=Ut(s,"svg",{viewBox:!0});var l=h(e);for(let m=0;m<a.length;m+=1)a[m].l(l);l.forEach(o),this.h()},h(){p(e,"viewBox","-200 -200 680 400")},m(s,l){W(s,e,l);for(let m=0;m<a.length;m+=1)a[m].m(e,null)},p(s,[l]){if(l&0){r=Ge;let m;for(m=0;m<r.length;m+=1){const _=Mt(s,r,m);a[m]?a[m].p(_,l):(a[m]=Rt(_),a[m].c(),a[m].m(e,null))}for(;m<a.length;m+=1)a[m].d(1);a.length=r.length}},i:z,o:z,d(s){s&&o(e),Ot(a,s)}}}function ha(g,e,r){let{value:a}=e;var s=De(Ge,Je,{maxSegmentLength:4}),l=De(Je,Ge,{maxSegmentLength:4}),m=De(Je,Qe,{maxSegmentLength:4}),_=De(Qe,Je,{maxSegmentLength:4}),w=De(Qe,Ge,{maxSegmentLength:4}),S=De(Ge,Qe,{maxSegmentLength:4});let u,d=0,P=!1;function T(){a==3&&d==2?(r(2,P=!0),r(1,u=s)):a==2&&d==3?r(1,u=l):a==6&&d==5?r(1,u=m):a==5&&d==6?r(1,u=_):a==7&&d==6?r(1,u=w):a==6&&d==7&&r(1,u=S),setTimeout(()=>d=a,200)}let k;return qt(()=>{r(3,k=Xt("path"))}),g.$$set=G=>{"value"in G&&r(0,a=G.value)},g.$$.update=()=>{g.$$.dirty&1&&T(),g.$$.dirty&14&&P&&k.data(u).transition().delay(function(G,F){return 100*F}).duration(1e3).attrTween("d",function(G){return G})},[a,u,P,k]}class ca extends Ye{constructor(e){super();Ue(this,e,ha,la,qe,{value:0})}}function fa(g){let e,r,a;return{c(){e=i("div"),r=i("iframe"),this.h()},l(s){e=n(s,"DIV",{class:!0});var l=h(e);r=n(l,"IFRAME",{src:!0,frameborder:!0,allow:!0,class:!0}),h(r).forEach(o),l.forEach(o),this.h()},h(){Ht(r.src,a="https://www.youtube.com/embed/"+g[0])||p(r,"src",a),p(r,"frameborder","0"),p(r,"allow","accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"),r.allowFullscreen=!0,p(r,"class","svelte-1b3oixz"),p(e,"class","video-container svelte-1b3oixz")},m(s,l){W(s,e,l),t(e,r)},p(s,[l]){l&1&&!Ht(r.src,a="https://www.youtube.com/embed/"+s[0])&&p(r,"src",a)},i:z,o:z,d(s){s&&o(e)}}}function da(g,e,r){let{video_id:a}=e;return g.$$set=s=>{"video_id"in s&&r(0,a=s.video_id)},[a]}class ua extends Ye{constructor(e){super();Ue(this,e,da,fa,qe,{video_id:0})}}function pa(g){let e,r,a,s,l,m,_,w,S,u,d,P,T,k,G,F,R,se,oe,x,ie,ne,N,le,he,V,ce,C,Y,fe,de,D,H,ue,L,pe,O,j,me,B,M,Q,E,I,X,U,be,ye,A,_e,Z,Ie,ee,Se,ke,Fe,Ee,K,et,tt,q,te,at,xe,rt,st,ot,ae,it,Ae,nt,lt,ht,re,ct,$e,ft,dt,ut,Pe,pt,mt,Te,ve,We;return w=new ua({props:{video_id:"vLk7mlAtEXI"}}),H=new ta({props:{name:"chevrons-down",fill:"gray",width:"20px",height:"20px"}}),j=new aa({props:{data:ra,fixedComp:ca,fixPosition:"right"}}),ve=new ea({props:{route:"d3/",compid:"recipes/AnimatedTransitions.Chart2"}}),{c(){e=i("div"),r=i("h2"),a=c("The goal"),s=b(),l=i("p"),m=c(`In this article, I try to re-create some of the animated transitions between\r
    different types of charts originally found in the following YouTube video.`),_=b(),Ce(w.$$.fragment),S=b(),u=i("p"),d=c("This presented the following challenges to be overcome:"),P=b(),T=i("ul"),k=i("li"),G=c(`How to tween smoothly between different SVG elements (i.e. from Rect to\r
      Circle)?`),F=b(),R=i("li"),se=c("How to coordinate this across multiple bars/ circles?"),oe=b(),x=i("p"),ie=c(`Obviously the tools I will be using will be Svelte and D3 (and I also used a\r
    third-party library called Flubber for SVG path manipulation. `),ne=i("br"),N=i("br"),le=c(`I\r
    chose Flubber after a number of unsuccessful attempts (for this specific use\r
    case) with: polymorph-js, d3 string interpolator and a custom Svelte\r
    interpolator/tween; more on these failed attempts towards the end of this\r
    article.`),he=b(),V=i("h2"),ce=c("Demo:"),C=b(),Y=i("p"),fe=c("Before we get to the code and implementation tips, let's check out the demo:"),de=b(),D=i("div"),Ce(H.$$.fragment),ue=b(),L=i("span"),pe=c("Scroll"),O=b(),Ce(j.$$.fragment),me=b(),B=i("h2"),M=c("Data"),Q=b(),E=i("p"),I=c(`As is often the case with D3/ Animation code, how we format our data ready\r
    for visualization is all-important. You can find the source data (and path\r
    creation logic) I created for this piece `),X=i("a"),U=c("here"),be=c("."),ye=b(),A=i("p"),_e=c("In the piece, it was actually the SVG morphing library, "),Z=i("a"),Ie=c("Flubber"),ee=c(", that dictated the shape of the input data. "),Se=i("br"),ke=i("br"),Fe=c(`I wanted to use\r
    the interpolateAll() function which takes as input two lists of paths (for\r
    example, a list of paths for bars and a list of paths for pies), and creates\r
    interpolators for each transformation. This meant writing functions for the\r
    creation of SVG paths that look like Rects and Circles (the Pies are already\r
    SVG Paths from D3)`),Ee=b(),K=i("h2"),et=c("Tried and failed/ gotchas"),tt=b(),q=i("ul"),te=i("li"),at=c(`I initially used polymorph-js, and created a custom interpolator,\r
      similarly to how it is described in `),xe=i("a"),rt=c("this code"),st=c(`. Whilst this worked well for one SVG element, I found it difficult to\r
      efficiently apply it across multiple SVG elements (e.g. 100 bars in a bar\r
      chart)`),ot=b(),ae=i("li"),it=c("I also tried the "),Ae=i("a"),nt=c("d3.interpolateString"),lt=c(` method, but this fails when you go beyond anything but the simplest of SVG\r
      paths.`),ht=b(),re=i("li"),ct=c("Finally, I tried something similar to "),$e=i("a"),ft=c("this example"),dt=c(`. It basically converts paths to points, tweens the raw values with\r
      Svelte tweening, then converts the points back to paths. This works well\r
      for simple icons, but when you have Arcs and other SVG path descriptors,\r
      things get messy, fast.`),ut=b(),Pe=i("h2"),pt=c("Svelte code"),mt=b(),Te=i("div"),Ce(ve.$$.fragment),this.h()},l($){e=n($,"DIV",{class:!0});var v=h(e);r=n(v,"H2",{class:!0});var yt=h(r);a=f(yt,"The goal"),yt.forEach(o),s=y(v),l=n(v,"P",{class:!0});var _t=h(l);m=f(_t,`In this article, I try to re-create some of the animated transitions between\r
    different types of charts originally found in the following YouTube video.`),_t.forEach(o),_=y(v),He(w.$$.fragment,v),S=y(v),u=n(v,"P",{});var It=h(u);d=f(It,"This presented the following challenges to be overcome:"),It.forEach(o),P=y(v),T=n(v,"UL",{class:!0});var ze=h(T);k=n(ze,"LI",{class:!0});var St=h(k);G=f(St,`How to tween smoothly between different SVG elements (i.e. from Rect to\r
      Circle)?`),St.forEach(o),F=y(ze),R=n(ze,"LI",{class:!0});var kt=h(R);se=f(kt,"How to coordinate this across multiple bars/ circles?"),kt.forEach(o),ze.forEach(o),oe=y(v),x=n(v,"P",{class:!0});var Be=h(x);ie=f(Be,`Obviously the tools I will be using will be Svelte and D3 (and I also used a\r
    third-party library called Flubber for SVG path manipulation. `),ne=n(Be,"BR",{}),N=n(Be,"BR",{}),le=f(Be,`I\r
    chose Flubber after a number of unsuccessful attempts (for this specific use\r
    case) with: polymorph-js, d3 string interpolator and a custom Svelte\r
    interpolator/tween; more on these failed attempts towards the end of this\r
    article.`),Be.forEach(o),he=y(v),V=n(v,"H2",{class:!0});var Et=h(V);ce=f(Et,"Demo:"),Et.forEach(o),C=y(v),Y=n(v,"P",{class:!0});var xt=h(Y);fe=f(xt,"Before we get to the code and implementation tips, let's check out the demo:"),xt.forEach(o),de=y(v),D=n(v,"DIV",{class:!0});var Ne=h(D);He(H.$$.fragment,Ne),ue=y(Ne),L=n(Ne,"SPAN",{});var At=h(L);pe=f(At,"Scroll"),At.forEach(o),Ne.forEach(o),O=y(v),He(j.$$.fragment,v),me=y(v),B=n(v,"H2",{class:!0});var $t=h(B);M=f($t,"Data"),$t.forEach(o),Q=y(v),E=n(v,"P",{});var Oe=h(E);I=f(Oe,`As is often the case with D3/ Animation code, how we format our data ready\r
    for visualization is all-important. You can find the source data (and path\r
    creation logic) I created for this piece `),X=n(Oe,"A",{href:!0});var Pt=h(X);U=f(Pt,"here"),Pt.forEach(o),be=f(Oe,"."),Oe.forEach(o),ye=y(v),A=n(v,"P",{});var ge=h(A);_e=f(ge,"In the piece, it was actually the SVG morphing library, "),Z=n(ge,"A",{href:!0});var Tt=h(Z);Ie=f(Tt,"Flubber"),Tt.forEach(o),ee=f(ge,", that dictated the shape of the input data. "),Se=n(ge,"BR",{}),ke=n(ge,"BR",{}),Fe=f(ge,`I wanted to use\r
    the interpolateAll() function which takes as input two lists of paths (for\r
    example, a list of paths for bars and a list of paths for pies), and creates\r
    interpolators for each transformation. This meant writing functions for the\r
    creation of SVG paths that look like Rects and Circles (the Pies are already\r
    SVG Paths from D3)`),ge.forEach(o),Ee=y(v),K=n(v,"H2",{class:!0});var Vt=h(K);et=f(Vt,"Tried and failed/ gotchas"),Vt.forEach(o),tt=y(v),q=n(v,"UL",{class:!0});var Ve=h(q);te=n(Ve,"LI",{class:!0});var Xe=h(te);at=f(Xe,`I initially used polymorph-js, and created a custom interpolator,\r
      similarly to how it is described in `),xe=n(Xe,"A",{href:!0});var Dt=h(xe);rt=f(Dt,"this code"),Dt.forEach(o),st=f(Xe,`. Whilst this worked well for one SVG element, I found it difficult to\r
      efficiently apply it across multiple SVG elements (e.g. 100 bars in a bar\r
      chart)`),Xe.forEach(o),ot=y(Ve),ae=n(Ve,"LI",{class:!0});var Ze=h(ae);it=f(Ze,"I also tried the "),Ae=n(Ze,"A",{href:!0});var Gt=h(Ae);nt=f(Gt,"d3.interpolateString"),Gt.forEach(o),lt=f(Ze,` method, but this fails when you go beyond anything but the simplest of SVG\r
      paths.`),Ze.forEach(o),ht=y(Ve),re=n(Ve,"LI",{class:!0});var Ke=h(re);ct=f(Ke,"Finally, I tried something similar to "),$e=n(Ke,"A",{href:!0});var Ft=h($e);ft=f(Ft,"this example"),Ft.forEach(o),dt=f(Ke,`. It basically converts paths to points, tweens the raw values with\r
      Svelte tweening, then converts the points back to paths. This works well\r
      for simple icons, but when you have Arcs and other SVG path descriptors,\r
      things get messy, fast.`),Ke.forEach(o),Ve.forEach(o),ut=y(v),Pe=n(v,"H2",{class:!0});var Bt=h(Pe);pt=f(Bt,"Svelte code"),Bt.forEach(o),mt=y(v),Te=n(v,"DIV",{class:!0});var Ct=h(Te);He(ve.$$.fragment,Ct),Ct.forEach(o),v.forEach(o),this.h()},h(){p(r,"class","svelte-1ep460k"),p(l,"class","r"),p(k,"class","svelte-1ep460k"),p(R,"class","svelte-1ep460k"),p(T,"class","svelte-1ep460k"),p(x,"class","r"),p(V,"class","svelte-1ep460k"),p(Y,"class","r"),p(D,"class","box bounce-5 svelte-1ep460k"),p(B,"class","svelte-1ep460k"),p(X,"href","https://github.com/visual-svelte/website/blob/main/src/data/animatedTransitions.js"),p(Z,"href","https://github.com/veltman/flubber"),p(K,"class","svelte-1ep460k"),p(xe,"href","https://gist.github.com/Cleecanth/342eaa59c7738fc687043eb224814c02"),p(te,"class","svelte-1ep460k"),p(Ae,"href","https://observablehq.com/@d3/d3-interpolatestring"),p(ae,"class","svelte-1ep460k"),p($e,"href","https://svelte.dev/repl/a6268cfc4685416998c6e64516546acd?version=3"),p(re,"class","svelte-1ep460k"),p(q,"class","svelte-1ep460k"),p(Pe,"class","svelte-1ep460k"),p(Te,"class","code-box svelte-1ep460k"),p(e,"class","wrapper svelte-1ep460k")},m($,v){W($,e,v),t(e,r),t(r,a),t(e,s),t(e,l),t(l,m),t(e,_),Le(w,e,null),t(e,S),t(e,u),t(u,d),t(e,P),t(e,T),t(T,k),t(k,G),t(T,F),t(T,R),t(R,se),t(e,oe),t(e,x),t(x,ie),t(x,ne),t(x,N),t(x,le),t(e,he),t(e,V),t(V,ce),t(e,C),t(e,Y),t(Y,fe),t(e,de),t(e,D),Le(H,D,null),t(D,ue),t(D,L),t(L,pe),t(e,O),Le(j,e,null),t(e,me),t(e,B),t(B,M),t(e,Q),t(e,E),t(E,I),t(E,X),t(X,U),t(E,be),t(e,ye),t(e,A),t(A,_e),t(A,Z),t(Z,Ie),t(A,ee),t(A,Se),t(A,ke),t(A,Fe),t(e,Ee),t(e,K),t(K,et),t(e,tt),t(e,q),t(q,te),t(te,at),t(te,xe),t(xe,rt),t(te,st),t(q,ot),t(q,ae),t(ae,it),t(ae,Ae),t(Ae,nt),t(ae,lt),t(q,ht),t(q,re),t(re,ct),t(re,$e),t($e,ft),t(re,dt),t(e,ut),t(e,Pe),t(Pe,pt),t(e,mt),t(e,Te),Le(ve,Te,null),We=!0},p:z,i($){We||(je(w.$$.fragment,$),je(H.$$.fragment,$),je(j.$$.fragment,$),je(ve.$$.fragment,$),We=!0)},o($){Me(w.$$.fragment,$),Me(H.$$.fragment,$),Me(j.$$.fragment,$),Me(ve.$$.fragment,$),We=!1},d($){$&&o(e),Re(w),Re(H),Re(j),Re(ve)}}}class ma extends Ye{constructor(e){super();Ue(this,e,null,pa,qe,{})}}function va(g){let e,r,a,s,l,m,_,w,S;return{c(){e=i("button"),r=c("Split"),a=b(),s=i("button"),l=c("Unite"),m=b(),_=i("div"),this.h()},l(u){e=n(u,"BUTTON",{});var d=h(e);r=f(d,"Split"),d.forEach(o),a=y(u),s=n(u,"BUTTON",{});var P=h(s);l=f(P,"Unite"),P.forEach(o),m=y(u),_=n(u,"DIV",{id:!0}),h(_).forEach(o),this.h()},h(){p(_,"id","container")},m(u,d){W(u,e,d),t(e,r),W(u,a,d),W(u,s,d),t(s,l),W(u,m,d),W(u,_,d),w||(S=[Lt(e,"click",g[0]),Lt(s,"click",g[1])],w=!0)},p:z,i:z,o:z,d(u){u&&o(e),u&&o(a),u&&o(s),u&&o(m),u&&o(_),w=!1,Zt(S)}}}let J=500,we=250;function ga(g){let e,r,a;function s(){var w=[];jt(200).forEach(function(S,u){var d={};d.cluster=0,d.radius=5,d.colour="#9CCFE5",d.x=J/2+(Math.random()-10),d.y=we/2+Math.random(),w.push(d)}),jt(50).forEach(function(S,u){var d={};d.cluster=1,d.radius=5,d.colour="#9FE789",d.x=J/2+(Math.random()+10),d.y=we/2+Math.random(),w.push(d)}),l(w)}function l(w){e=Jt(w).alpha(.02).force("charge",vt().strength(-30)).force("xPos",gt(J/2).strength(1)).force("yPos",wt(we/2).strength(1)),e.on("tick",S);function S(){r.clearRect(0,0,J,we),r.save(),w.forEach(u),r.restore()}function u(d){r.beginPath(),r.moveTo(d.x+d.radius,d.y),r.arc(d.x,d.y,d.radius,0,2*Math.PI),r.fillStyle=d.colour,r.fill()}}function m(){e.stop(),e.force("charge",vt().strength(-5)).force("xPos",gt(w=>w.cluster===0?J*.3:J*.7)).force("yPos",wt(we/2)).alpha(.5),e.restart()}function _(){e.stop(),e.force("charge",vt().strength(-5)).force("xPos",gt(function(w){return w.cluster===0?J*.5:J*.4})).force("yPos",wt(we/2)).force("collision",Qt(5)),e.alpha(.5),e.restart()}return qt(()=>{a=Kt("#container").append("canvas").attr("width",J).attr("height",we),r=a.node().getContext("2d"),s()}),[m,_]}class wa extends Ye{constructor(e){super();Ue(this,e,ga,va,qe,{})}}function ba(g){let e,r,a,s,l,m,_,w,S,u,d,P,T,k,G,F,R,se,oe,x,ie,ne,N,le,he,V,ce,C,Y,fe,de,D,H,ue,L,pe,O,j,me,B,M,Q;return M=new wa({}),{c(){e=i("div"),r=i("h2"),a=c("Motivation"),s=b(),l=i("p"),m=c("This piece is inspired by two pieces: 1) the "),_=i("a"),w=c("State of the APIs"),S=c(`\r
    by Amelia Wattenberger (specifically the first bit on the demographics of the\r
    survey participants), and 2) this\r
    `),u=i("a"),d=c("Hamilton piece"),P=c(" on Pudding.cool by Shirley Wu."),T=b(),k=i("p"),G=c("Both pieces feature (what I assume to be) "),F=i("a"),R=c("D3 force simulations"),se=c(` and animated them to give life to the pieces. This is a technique I wanted\r
    to learn, so this article is my attempt!`),oe=b(),x=i("p"),ie=c(`I also wanted to explore how I can combine the Svelte animation toolkit with\r
    D3 force simulations. So let's get started!`),ne=b(),N=i("h2"),le=c("The limits of just d3-force"),he=b(),V=i("p"),ce=c(`Before getting stuck into more fancy stuff, I wanted to explore what was\r
    possible just with `),C=i("a"),Y=c("d3-force"),fe=c("."),de=b(),D=i("h2"),H=c("First"),ue=b(),L=i("div"),pe=b(),O=i("h2"),j=c("Second"),me=b(),B=i("div"),Ce(M.$$.fragment),this.h()},l(E){e=n(E,"DIV",{class:!0});var I=h(e);r=n(I,"H2",{});var X=h(r);a=f(X,"Motivation"),X.forEach(o),s=y(I),l=n(I,"P",{});var U=h(l);m=f(U,"This piece is inspired by two pieces: 1) the "),_=n(U,"A",{href:!0});var be=h(_);w=f(be,"State of the APIs"),be.forEach(o),S=f(U,`\r
    by Amelia Wattenberger (specifically the first bit on the demographics of the\r
    survey participants), and 2) this\r
    `),u=n(U,"A",{href:!0});var ye=h(u);d=f(ye,"Hamilton piece"),ye.forEach(o),P=f(U," on Pudding.cool by Shirley Wu."),U.forEach(o),T=y(I),k=n(I,"P",{});var A=h(k);G=f(A,"Both pieces feature (what I assume to be) "),F=n(A,"A",{rel:!0,href:!0});var _e=h(F);R=f(_e,"D3 force simulations"),_e.forEach(o),se=f(A,` and animated them to give life to the pieces. This is a technique I wanted\r
    to learn, so this article is my attempt!`),A.forEach(o),oe=y(I),x=n(I,"P",{});var Z=h(x);ie=f(Z,`I also wanted to explore how I can combine the Svelte animation toolkit with\r
    D3 force simulations. So let's get started!`),Z.forEach(o),ne=y(I),N=n(I,"H2",{});var Ie=h(N);le=f(Ie,"The limits of just d3-force"),Ie.forEach(o),he=y(I),V=n(I,"P",{});var ee=h(V);ce=f(ee,`Before getting stuck into more fancy stuff, I wanted to explore what was\r
    possible just with `),C=n(ee,"A",{rel:!0,href:!0});var Se=h(C);Y=f(Se,"d3-force"),Se.forEach(o),fe=f(ee,"."),ee.forEach(o),de=y(I),D=n(I,"H2",{});var ke=h(D);H=f(ke,"First"),ke.forEach(o),ue=y(I),L=n(I,"DIV",{class:!0});var Fe=h(L);Fe.forEach(o),pe=y(I),O=n(I,"H2",{});var Ee=h(O);j=f(Ee,"Second"),Ee.forEach(o),me=y(I),B=n(I,"DIV",{class:!0});var K=h(B);He(M.$$.fragment,K),K.forEach(o),I.forEach(o),this.h()},h(){p(_,"href","https://stateofapis.com/"),p(u,"href","https://pudding.cool/2017/03/hamilton/index.html"),p(F,"rel","internal"),p(F,"href","/d3/api/d3-force"),p(C,"rel","internal"),p(C,"href","/d3/api/d3-force"),p(L,"class","full-width svelte-1g9d6ju"),p(B,"class","full-width svelte-1g9d6ju"),p(e,"class","wrapper svelte-1g9d6ju")},m(E,I){W(E,e,I),t(e,r),t(r,a),t(e,s),t(e,l),t(l,m),t(l,_),t(_,w),t(l,S),t(l,u),t(u,d),t(l,P),t(e,T),t(e,k),t(k,G),t(k,F),t(F,R),t(k,se),t(e,oe),t(e,x),t(x,ie),t(e,ne),t(e,N),t(N,le),t(e,he),t(e,V),t(V,ce),t(V,C),t(C,Y),t(V,fe),t(e,de),t(e,D),t(D,H),t(e,ue),t(e,L),t(e,pe),t(e,O),t(O,j),t(e,me),t(e,B),Le(M,B,null),Q=!0},p:z,i(E){Q||(je(M.$$.fragment,E),Q=!0)},o(E){Me(M.$$.fragment,E),Q=!1},d(E){E&&o(e),Re(M)}}}class ya extends Ye{constructor(e){super();Ue(this,e,null,ba,qe,{})}}let ka=[{primary_key:"AnimatedTransitions",published:"2022-04-05",post_title:"Animated Chart Transitions with Svelte, D3 & Flubber",thumbnail:"/images/thumbnails/animatedTransitions.png",keywords:["d3","svelte","animation","flubber"],intro_text:"How to make really smooth transitions between different chart types, inspired by <a href='https://www.youtube.com/watch?v=vLk7mlAtEXI'>this YouTube video</a>.",component:ma},{primary_key:"ForceAnimations",published:"",post_title:"Animating D3 Forces with Svelte",thumbnail:"/images/thumbnails/graph.png",keywords:["d3","svelte","force","animation"],intro_text:"How to make particles dance around the page with Svelte and D3.",component:ya}];export{ka as d};
